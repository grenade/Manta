name: parachain

on:
  push:
    branches:
      - manta-pc

env:
  CARGO_TERM_COLOR: always

jobs:

  get-rust-versions:
    runs-on: ubuntu-latest
    container:
      image: paritytech/ci-linux:production
    outputs:
      rustc-stable: ${{ steps.get-rust-versions.outputs.stable }}
      rustc-nightly: ${{ steps.get-rust-versions.outputs.nightly }}
    steps:
      -
        id: get-rust-versions
        run: |
          echo "::set-output name=stable::$(rustc +stable --version)"
          echo "::set-output name=nightly::$(rustc +nightly --version)"

#  create-execution-plan:
#    runs-on: ubuntu-latest
#    steps:
#      -
#        id: tag-filter
#        run: |
#          echo "github.event.ref: ${{ github.event.ref }}"
#          if [[ ${{ github.event.ref }} =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+(-.+)?$ ]]; then
#            echo ::set-output name=match::true
#          else
#            echo ::set-output name=match::false
#          fi
#      - name: log tag filter positive match result
#        if: steps.tag-filter.outputs.match == 'true'
#        run: |
#          echo "ref matches tag filter"
#      - name: log tag filter negative match result
#        if: steps.tag-filter.outputs.match == 'false'
#        run: |
#          echo "ref does not match tag filter"

  build-runtimes:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        runtime:
          - calamari
          - manta-pc
    steps:
      - uses: actions/checkout@v2
      - name: cache target dir
        uses: actions/cache@v2
        with:
          path: "${{ github.workspace }}/runtime/${{ matrix.runtime }}/target"
          key: srtool-target-${{ matrix.runtime }}-${{ github.sha }}
          restore-keys: |
            srtool-target-${{ matrix.runtime }}-
            srtool-target-
      - name: build ${{ matrix.runtime }} runtime
        id: srtool_build
        uses: chevdor/srtool-actions@v0.3.0
        with:
          image: paritytech/srtool
          chain: ${{ matrix.runtime }}
      - name: persist srtool digest
        run: >
          echo '${{ steps.srtool_build.outputs.json }}' |
          jq > ${{ matrix.runtime }}_srtool_output.json
      - name: upload ${{ matrix.runtime }} srtool json
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.runtime }}-srtool-json
          path: ${{ matrix.runtime }}_srtool_output.json
      - name: upload ${{ matrix.runtime }} runtime
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.runtime }}-runtime
          path: |
            ${{ steps.srtool_build.outputs.wasm }}
            ${{ steps.srtool_build.outputs.wasm_compressed }}

  build-changelog:
    runs-on: ubuntu-latest
    needs:
      - get-rust-versions
    outputs:
      release_url: ${{ steps.create-release.outputs.html_url }}
      asset_upload_url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          path: Manta
      - name: ruby setup
        uses: actions/setup-ruby@v1
        with:
          ruby-version: 2.7
      - name: changelog gems
        run: |
          gem install changelogerator git toml
      - name: generate changelog
        env:
          RUSTC_STABLE: ${{ needs.get-rust-versions.outputs.rustc-stable }}
          RUSTC_NIGHTLY: ${{ needs.get-rust-versions.outputs.rustc-nightly }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: >
          ruby $GITHUB_WORKSPACE/Manta/scripts/github/generate_release_text.rb |
          tee changelog.md
      - name: upload changelog
        uses: actions/upload-artifact@v2
        with:
          path: |
            changelog.md

  publish-draft-release:
    runs-on: ubuntu-latest
    needs:
      - build-changelog
      - build-runtimes
    outputs:
      release_url: ${{ steps.create-release.outputs.html_url }}
      asset_upload_url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - uses: actions/download-artifact@v2
      - name: create draft release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Manta ${{ github.ref }}
          body_path: ./changelog.md
          draft: true

#  publish-runtimes:
#    runs-on: ubuntu-latest
#    needs:
#      - publish-draft-release
#    strategy:
#      matrix:
#        runtime:
#          - calamari
#    steps:
#      - uses: actions/checkout@v2
#      - uses: actions/download-artifact@v2
#      - name: Set up Ruby 2.7
#        uses: actions/setup-ruby@v1
#        with:
#          ruby-version: 2.7
#      - name: Get runtime version
#        id: get-runtime-ver
#        run: |
#          ls
#          ls "${{ matrix.runtime }}-runtime"
#          runtime_ver="$(ruby -e 'require "./scripts/github/lib.rb"; puts get_runtime("${{ matrix.runtime }}")')"
#          echo "::set-output name=runtime_ver::$runtime_ver"
#      - name: Upload compact ${{ matrix.runtime }} wasm
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ needs.publish-draft-release.outputs.asset_upload_url }}
#          asset_path: "${{ matrix.runtime }}-runtime/${{ matrix.runtime }}_runtime.compact.wasm"
#          asset_name: ${{ matrix.runtime }}_runtime-v${{ steps.get-runtime-ver.outputs.runtime_ver }}.compact.wasm
#          asset_content_type: application/wasm
#      - name: Upload compressed ${{ matrix.runtime }} wasm
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ needs.publish-draft-release.outputs.asset_upload_url }}
#          asset_path: "${{ matrix.runtime }}-runtime/${{ matrix.runtime }}_runtime.compact.compressed.wasm"
#          asset_name: ${{ matrix.runtime }}_runtime-v${{ steps.get-runtime-ver.outputs.runtime_ver }}.compact.compressed.wasm
#          asset_content_type: application/wasm
#
#  post_to_matrix:
#    runs-on: ubuntu-latest
#    needs: publish-draft-release
#    steps:
#      - name: Internal polkadot channel
#        uses: s3krit/matrix-message-action@v0.0.2
#        with:
#          room_id: ${{ secrets.INTERNAL_POLKADOT_MATRIX_ROOM_ID }}
#          access_token: ${{ secrets.MATRIX_ACCESS_TOKEN }}
#          message: "**New version of polkadot tagged**: ${{ github.ref }}<br/>Draft release created: ${{ needs.publish-draft-release.outputs.release_url }}"
#          server: "matrix.parity.io"
#


